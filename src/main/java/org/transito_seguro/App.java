package org.transito_seguro;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.Environment;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * Clase principal de la aplicaci√≥n de integraci√≥n con e-Pagos.
 *
 * Sistema de integraci√≥n automatizada con e-Pagos para la gesti√≥n de:
 * - Rendiciones (pagos exitosos de infracciones)
 * - Contracargos (disputas de pagos)
 * - Sincronizaci√≥n multi-provincial
 * - B√∫squedas optimizadas con cach√© H2
 *
 * Arquitectura:
 * - H2 (en memoria) como cach√© primario
 * - 6 bases de datos PostgreSQL provinciales
 * - Cliente SOAP para comunicaci√≥n con e-Pagos
 * - Thread pools para procesamiento paralelo
 * - Tareas programadas para sincronizaci√≥n autom√°tica
 *
 * Provincias soportadas:
 * - PBA (Provincia de Buenos Aires)
 * - MDA (Mar del Plata)
 * - Santa Rosa (La Pampa)
 * - Chaco
 * - Entre R√≠os
 * - Formosa
 *
 * @author Sistema Tr√°nsito Seguro
 * @version 1.0
 * @since 2024-10
 */
@SpringBootApplication
@EnableAsync        // Habilita procesamiento as√≠ncrono (@Async)
@EnableScheduling   // Habilita tareas programadas (@Scheduled)
@Slf4j
public class App {

    /**
     * M√©todo principal de la aplicaci√≥n.
     *
     * Inicializa Spring Boot y muestra informaci√≥n de configuraci√≥n en consola.
     *
     * Perfiles disponibles:
     * - dev: Desarrollo local con H2 y PostgreSQL locales
     * - prod: Producci√≥n con configuraci√≥n segura (variables de entorno)
     *
     * Ejecuci√≥n:
     * - Desarrollo: java -jar app.jar --spring.profiles.active=dev
     * - Producci√≥n: java -jar app.jar --spring.profiles.active=prod
     *
     * @param args Argumentos de l√≠nea de comandos
     */
    public static void main(String[] args) {
        // Iniciar aplicaci√≥n Spring Boot
        ConfigurableApplicationContext context = SpringApplication.run(App.class, args);

        // Obtener informaci√≥n del entorno
        Environment env = context.getEnvironment();

        // Mostrar banner e informaci√≥n de inicio
        logApplicationStartup(env);
    }

    /**
     * Muestra informaci√≥n detallada del inicio de la aplicaci√≥n en consola.
     *
     * Informaci√≥n mostrada:
     * - Nombre de la aplicaci√≥n
     * - Perfil activo (dev/prod)
     * - URL de acceso local
     * - URL de acceso externo
     * - Puerto del servidor
     * - Context path
     * - Consola H2 (solo en desarrollo)
     *
     * @param env Entorno de Spring con las propiedades de configuraci√≥n
     */
    private static void logApplicationStartup(Environment env) {
        String protocol = "http";
        String serverPort = env.getProperty("server.port", "8080");
        String contextPath = env.getProperty("server.servlet.context-path", "/");
        String hostAddress = "localhost";

        try {
            hostAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            log.warn("No se pudo determinar la direcci√≥n del host", e);
        }

        String activeProfiles = env.getActiveProfiles().length == 0
                ? "default"
                : String.join(", ", env.getActiveProfiles());

        log.info("\n----------------------------------------------------------\n" +
                        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n" +
                        "  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\n" +
                        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n" +
                        "  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë\n" +
                        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\n" +
                        "  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n" +
                        "\n" +
                        "  Sistema de Integraci√≥n con e-Pagos\n" +
                        "  Gesti√≥n de Infracciones de Tr√°nsito\n" +
                        "----------------------------------------------------------\n" +
                        "  Aplicaci√≥n:       {}\n" +
                        "  Perfil(es):       {}\n" +
                        "  Puerto:           {}\n" +
                        "  Context Path:     {}\n" +
                        "----------------------------------------------------------\n" +
                        "  Acceso Local:     {}://localhost:{}{}\n" +
                        "  Acceso Externo:   {}://{}:{}{}\n" +
                        "----------------------------------------------------------",
                env.getProperty("spring.application.name", "integracion-epagos"),
                activeProfiles,
                serverPort,
                contextPath,
                protocol,
                serverPort,
                contextPath,
                protocol,
                hostAddress,
                serverPort,
                contextPath
        );

        // Mostrar informaci√≥n espec√≠fica seg√∫n el perfil
        if ("dev".equals(activeProfiles)) {
            log.info("\n----------------------------------------------------------\n" +
                            "  üîß MODO DESARROLLO\n" +
                            "----------------------------------------------------------\n" +
                            "  Consola H2:       {}://localhost:{}{}/h2-console\n" +
                            "  JDBC URL:         jdbc:h2:mem:infracciones_cache\n" +
                            "  Usuario:          sa\n" +
                            "  Password:         (vac√≠o)\n" +
                            "----------------------------------------------------------\n" +
                            "  ‚ö†Ô∏è  Las tareas programadas est√°n DESHABILITADAS\n" +
                            "  ‚ö†Ô∏è  SQL queries visibles en logs (debug)\n" +
                            "----------------------------------------------------------",
                    protocol,
                    serverPort,
                    contextPath
            );
        } else if ("prod".equals(activeProfiles)) {
            log.info("\n----------------------------------------------------------\n" +
                            "  üöÄ MODO PRODUCCI√ìN\n" +
                            "----------------------------------------------------------\n" +
                            "  Actuator:         {}://{}:{}{}/actuator\n" +
                            "  Health Check:     {}://{}:{}{}/actuator/health\n" +
                            "  Metrics:          {}://{}:{}{}/actuator/metrics\n" +
                            "----------------------------------------------------------\n" +
                            "  ‚úì Tareas programadas HABILITADAS\n" +
                            "  ‚úì Sincronizaci√≥n autom√°tica: Diaria 2:00 AM\n" +
                            "  ‚úì Verificaci√≥n contracargos: Diaria 12:00 PM\n" +
                            "----------------------------------------------------------",
                    protocol, hostAddress, serverPort, contextPath,
                    protocol, hostAddress, serverPort, contextPath,
                    protocol, hostAddress, serverPort, contextPath
            );
        }

        // Informaci√≥n de las bases de datos
        log.info("\n----------------------------------------------------------\n" +
                "  üíæ BASES DE DATOS CONFIGURADAS\n" +
                "----------------------------------------------------------\n" +
                "  Cach√© Primario:   H2 (en memoria)\n" +
                "  Provincias:       6 PostgreSQL\n" +
                "    ‚Ä¢ PBA (Provincia de Buenos Aires)\n" +
                "    ‚Ä¢ MDA (Mar del Plata)\n" +
                "    ‚Ä¢ Santa Rosa (La Pampa)\n" +
                "    ‚Ä¢ Chaco\n" +
                "    ‚Ä¢ Entre R√≠os\n" +
                "    ‚Ä¢ Formosa\n" +
                "----------------------------------------------------------"
        );

        // Informaci√≥n de e-Pagos
        String epagosUrl = env.getProperty("epagos.soap.url", "No configurado");
        String epagosUsuario = env.getProperty("epagos.soap.usuario", "No configurado");

        log.info("\n----------------------------------------------------------\n" +
                        "  üîå INTEGRACI√ìN E-PAGOS\n" +
                        "----------------------------------------------------------\n" +
                        "  Endpoint SOAP:    {}\n" +
                        "  Usuario:          {}\n" +
                        "  Estado:           Configurado\n" +
                        "----------------------------------------------------------",
                epagosUrl,
                epagosUsuario
        );

        log.info("\n----------------------------------------------------------\n" +
                "  ‚úÖ APLICACI√ìN INICIADA CORRECTAMENTE\n" +
                "----------------------------------------------------------\n"
        );
    }
}